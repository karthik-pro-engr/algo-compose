name: Firebase App Distribution

# Trigger workflow only on version tags like v1.0.0, v1.0.1
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-distribute:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # expose token to gradle
      GITHUB_ACTOR: ${{ github.actor }}           # username for auth (usually the actor)

    steps:
      # Checkout repo
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up JDK (required for Gradle & Android builds)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      # Decode Firebase service account from secret
      - name: Decode Firebase service account
        run: echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}" > app/firebase-service-account.json

      # Debug file is existing or not
      - name: Verify Firebase service account file
        run: |
            echo "Checking if firebase-service-account.json exists in app/"
            ls -l app/firebase-service-account.json
            echo "File contents (first 2 lines for safety check):"
            head -n 2 app/firebase-service-account.json

      # Decode Base64 release keystore from secret
      - name: Decode release keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > release.jks

      # Set Gradle signing environment variables
      - name: Set signing properties
        run: |
          echo "RELEASE_STORE_PASSWORD=${{ secrets.RELEASE_STORE_PASSWORD }}" >> $GITHUB_ENV
          echo "RELEASE_KEY_ALIAS=${{ secrets.RELEASE_KEY_ALIAS }}" >> $GITHUB_ENV
          echo "RELEASE_KEY_PASSWORD=${{ secrets.RELEASE_KEY_PASSWORD }}" >> $GITHUB_ENV

      # Extract versionName from Git tag
      - name: Set versionName from Git tag
        run: |
          echo "VERSION_NAME=${GITHUB_REF_NAME#refs/tags/}" >> $GITHUB_ENV
          echo "Git tag ${GITHUB_REF_NAME#refs/tags/} applied as versionName"

      # Enable Gradle caching for speed
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      # Prepare release Keystore
      - name: Prepare release keystore
        run: ./gradlew :app:prepareReleaseKeystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}


      # Build release-signed APK
      - name: Build Release APK
        run: ./gradlew assembleRelease -PversionName=$VERSION_NAME

      # Listing the files
      - name: Check APK exists
        run: ls -lh app/build/outputs/apk/release/

      # Generate SHA256 checksum
      - name: Generate SHA256 checksum
        run: |
          APK=$(find app/build/outputs/apk/release/ -name "*.apk")
          sha256sum "$APK" > "$APK.sha256"

      - name: Debug service account file
        run: |
          echo "Listing contents of app/"
          ls -l app/
          echo "Previewing service account file:"
          head -n 2 app/firebase-service-account.json

        # âœ… Confirm file exists before upload
      - name: Fail if service account file missing
        run: test -f app/firebase-service-account.json || (echo "Missing service account file!" && exit 1)

      - name: Prepare Firebase credentials
        run: ./gradlew prepareFirebaseCredentials
        env:
          FIREBASE_SERVICE_ACCOUNT_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}

      # Upload signed APK to Firebase App Distribution
      - name: Upload to Firebase
        run: ./gradlew appDistributionUploadRelease


      # Slack notification (optional)
      # - name: Notify Slack
      #  if: success()
      #  run: |
      #        curl -X POST -H 'Content-type: application/json' \
      #       --data "{\"text\":\"Release $VERSION_NAME uploaded to Firebase successfully!\"}" \
       #       ${{ secrets.SLACK_WEBHOOK_URL }}

