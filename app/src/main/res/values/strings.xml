<resources>
    <string name="app_name">AlgoCompose</string>
<!--    Energy Screen-->
    <string name="text_energy_screen_title">Producer House and Consumer House</string>
    <string name="text_energy_screen_content">In a town, each house either produces electricity (producer house) or consumes electricity (consumer house). You want to find the longest continuous stretch of houses where the total electricity balances out (no surplus, no deficit).</string>
    <string name="placeholder_input">P or C</string>
    <string name="label_house_type">Enter House Type</string>
    <string name="button_add_house_type">Add House type</string>
    <string name="text_no_house_types_added">No House Types Added</string>
    <string name="button_find_longest_stretch">Find Longest Stretch</string>
    <string name="button_reset">Reset</string>
    <!--    Budget Stay-->
    <string name="vsw_budget_title">Family Vacation – Hotel Bookings</string>
    <string name="vsw_budget_body">You’re planning a road trip with your family. Along the highway, there are hotels in sequence, and each hotel has a different nightly rate depending on amenities, demand, and location. You want to book a stretch of consecutive nights (one hotel per night) such that the total stay cost fits within your travel budget, while maximizing the number of nights.</string>
    <string name="vsw_budget_capacity_label">Add Budget</string>
    <string name="vsw_budget_capacity_placeholder">1000</string>
    <string name="vsw_budget_button_add">Add Budget</string>
    <string name="vsw_budget_label_input">Hotel Stay Cost</string>
    <string name="vsw_budget_placeholder_input">10000</string>
    <string name="vsw_budget_button_add_hotel_cost">Add Hotel Cost</string>
    <string name="vsw_budget_no_items_info">No Hotel Cost Added</string>
    <string name="vsw_budget_button_compute">Find Longest Night Stay</string>
    <string name="vsw_budget_capacity_added">Added Budget: %1$d</string>
    <string name="vsw_budget_result">The Longest Stretch Hotel Starts from %1$d to %2$d and total nights are %3$s </string>
    <plurals name="vsw_budget_nights">
        <item quantity="one">%d night</item>
        <item quantity="other">%d nights</item>
    </plurals>
    <!--    Internet Data Flow-->
    <string name="vsw_video_title">Video Play Requests to Server</string>
    <string name="vsw_video_body">A server is handling incoming video play requests per second (some light, some heavy). Find the maximum number of consecutive seconds where the total requests stay within the allowed server capacity.</string>
    <string name="vsw_video_capacity_label_add">Add Requests Capacity</string>
    <string name="vsw_video_capacity_placeholder">10000</string>
    <string name="vsw_video_capacity_button_add">Add Requests Capacity</string>
    <string name="vsw_video_label_input">Requests per second</string>
    <string name="vsw_video_placeholder_input">10000</string>
    <string name="vsw_video_no_input_infos">No Data Request Added</string>
    <string name="vsw_video_button_add_input">Add Data Request</string>
    <string name="vsw_video_button_compute">Find Longest Seconds</string>
    <string name="vsw_video_capacity_added">The Max Capacity Requests are %1$d</string>
    <string name="vsw_video_result">The Longest Consecutive Requests Starts from %1$d to %2$d and total seconds are %3$s </string>
    <plurals name="vsw_video_seconds">
        <item quantity="one">%d second</item>
        <item quantity="other">%d seconds</item>
    </plurals>

    <!--    Box Nesting-->
    <string name="placeholder_box_size_volume">1800 CC is adds automatically</string>
    <string name="label_box_size_input">Enter Size(CC) in numeric </string>
    <string name="button_add_delivery_box_size">Add Box Size</string>
    <string name="text_no_delivery_boxes_added">No Box Sizes Added</string>
    <string name="button_find_auto_nest_boxes">Auto-Nest Boxes</string>
    <string name="box_nesting_title">Find the next larger box for each box in the incoming conveyor (Warehouse Delivery Boxes)</string>
    <string name="box_nesting_problem_statement">A regional fulfillment warehouse receives mixed batches of empty shipping cartons on a conveyor belt. To reduce pallet height, protect fragile items, and speed up downstream packing, staff want to automatically identify opportunities to nest smaller cartons into the next larger carton that appears later on the conveyor. This matching is used by the packing robot and operators to decide whether to nest, hold for a different shipment, or mark for repack.</string>


    <!--    Feedback-->
    <string name="feedback_prompt">Please describe the issue and steps to reproduce or share your common feedback</string>
</resources>